{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","none","sortMethod","setSortMethod","reverse","setReverse","sortedGoods","useMemo","goods","copyOfGoods","sort","good1","good2","alphabet","localeCompare","length","getSorted","className","type","onClick","cn","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,uBAAAA,E,mBAAAA,E,SAAAA,M,KAoCE,IAAME,EAAgB,WAC3B,MAAoCC,mBAASH,EAASI,MAAtD,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAA8BH,oBAAS,GAAvC,mBAAOI,EAAP,KAAgBC,EAAhB,KAWMC,EAAcC,mBAAQ,kBAtC9B,SAAmBC,EAAnB,GAA4E,IAAtCN,EAAqC,EAArCA,WAAYE,EAAyB,EAAzBA,QAC1CK,EAAW,YAAOD,GAiBxB,OAfIN,GACFO,EAAYC,MAAK,SAACC,EAAOC,GACvB,OAAQV,GACN,KAAKL,EAASgB,SACZ,OAAOF,EAAMG,cAAcF,GAE7B,KAAKf,EAASkB,OACZ,OAAOJ,EAAMI,OAASH,EAAMG,OAE9B,QACE,OAAO,MAKXX,EACKK,EAAYL,UAGdK,EAgB2BO,CAChClB,EAAiB,CAAEI,aAAYE,cAC9B,CAACF,EAAYE,IAEhB,OACE,sBAAKa,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLC,QAAS,kBAAMhB,EAAcN,EAASgB,WACtCI,UAAWG,IAAG,iBACZ,CAAE,WAAYlB,IAAeL,EAASgB,WAJ1C,iCASA,wBACEK,KAAK,SACLC,QAAS,kBAAMhB,EAAcN,EAASkB,SACtCE,UAAWG,IAAG,oBACZ,CAAE,WAAYlB,IAAeL,EAASkB,SAJ1C,4BASA,wBACEG,KAAK,SACLC,QA/BW,WACjBd,GAAYD,IA+BNa,UAAWG,IAAG,oBACZ,CAAE,YAAahB,IAJnB,sBASEF,GAAcE,IACd,wBACEc,KAAK,SACLC,QA9CI,WACZhB,EAAcN,EAASI,MACvBI,GAAW,IA6CHY,UAAU,4BAHZ,sBAUJ,6BACGX,EAAYe,KAAI,SAAAC,GAAI,OACnB,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,YC/GlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.e2349ce7.chunk.js","sourcesContent":["import React, { useState, useMemo } from 'react';\nimport cn from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  alphabet = 'by alphabet',\n  length = 'by length',\n  none = '',\n}\n\ntype OrderMethods = {\n  sortMethod: SortType;\n  reverse: boolean;\n};\n\nfunction getSorted(goods: string[], { sortMethod, reverse }: OrderMethods) {\n  const copyOfGoods = [...goods];\n\n  if (sortMethod) {\n    copyOfGoods.sort((good1, good2) => {\n      switch (sortMethod) {\n        case SortType.alphabet:\n          return good1.localeCompare(good2);\n\n        case SortType.length:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (reverse) {\n    return copyOfGoods.reverse();\n  }\n\n  return copyOfGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortMethod, setSortMethod] = useState(SortType.none);\n  const [reverse, setReverse] = useState(false);\n\n  const reset = () => {\n    setSortMethod(SortType.none);\n    setReverse(false);\n  };\n\n  const getReverse = () => {\n    setReverse(!reverse);\n  };\n\n  const sortedGoods = useMemo(() => getSorted(\n    goodsFromServer, { sortMethod, reverse },\n  ), [sortMethod, reverse]);\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          onClick={() => setSortMethod(SortType.alphabet)}\n          className={cn('button is-info',\n            { 'is-light': sortMethod !== SortType.alphabet })}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={() => setSortMethod(SortType.length)}\n          className={cn('button is-success',\n            { 'is-light': sortMethod !== SortType.length })}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={getReverse}\n          className={cn('button is-warning',\n            { 'is-light': !reverse })}\n        >\n          Reverse\n        </button>\n\n        {(sortMethod || reverse) && (\n          <button\n            type=\"button\"\n            onClick={reset}\n            className=\"button is-danger is-light\"\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {sortedGoods.map(good => (\n          <li data-cy=\"Good\" key={good}>{good}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}